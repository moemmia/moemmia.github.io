/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef} from 'react'
import { useGLTF, useAnimations   } from '@react-three/drei'
import { useThree, useFrame} from '@react-three/fiber'
import * as THREE from "three"

export function Model(props) {
  const { nodes, materials, animations } = useGLTF('/models/portfolio.glb')
  const { mouse } = useThree()

const headRef = useRef()
const groupRef = useRef()

const { actions } = useAnimations(animations, groupRef)

  useEffect(() => {
    if (materials) {
      Object.entries(materials).forEach(([key, mat]) => {
        mat.aoMapIntensity = 0.8
        mat.needsUpdate = true
      })
    }
  }, [materials])

  
  useEffect(() => {
    if (actions.rigAction) {
      actions.rigAction.reset().setLoop(THREE.LoopRepeat, Infinity).play()
    } else {
      console.warn("rigAction not found in actions")
    }
  }, [actions])

  useEffect(() => {
    const skinnedMesh = nodes.Char
    const skeleton = skinnedMesh.skeleton
    const spine005 = skeleton.bones.find(b => b.name === 'DEF-spine005')

    if (!spine005) {
      console.warn('Bone DEF-spine005 not found')
      return
    }

    headRef.current = spine005
  }, [nodes])
  
  useFrame(() => {
    const head = headRef.current
    if (!head) return

    const vector = new THREE.Vector3(
      -1,
      (mouse.y + 0.5) * 0.5,
      mouse.x
    )

    head.lookAt(vector)
  })

  return (
    <group {...props} dispose={null} ref={groupRef}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.arcade.geometry}
        material={materials.Arcade}
        position={[-0.093, 0, 1.43]}
        scale={0.81}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['arcade-buttons'].geometry}
          material={materials.Keyboard}
          position={[0, 0, 0.115]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['arcade-screen'].geometry}
          material={materials.Screen}
        />
      </mesh>
      <mesh castShadow receiveShadow geometry={nodes.table.geometry} material={materials.Basic}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.drawer.geometry}
          material={materials.Basic}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.keyboard.geometry}
          material={materials.Keyboard}
          position={[0.215, 0, 0.065]}
          rotation={[0, -Math.PI / 9, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mouse.geometry}
          material={materials.Keyboard}
          position={[0.215, -0, 0.065]}
          rotation={[0, -Math.PI / 9, 0]}
        />
        <mesh castShadow receiveShadow geometry={nodes.pc.geometry} material={materials.Pc} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['pc-screen'].geometry}
          material={materials.Screen}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.chair.geometry}
        material={materials.Basic}
        position={[0.643, -0.016, 0.576]}
        rotation={[-Math.PI, 0.373, -Math.PI]}
      />
      <group position={[0.279, 0, 0.432]} rotation={[Math.PI, -1.198, Math.PI]}>
        <skinnedMesh
          geometry={nodes.Char.geometry}
          material={materials.Char}
          skeleton={nodes.Char.skeleton}
          castShadow
          receiveShadow
          
        />
        <primitive object={nodes.root} />
        <primitive object={nodes['MCH-torsoparent']} />
        <primitive object={nodes['MCH-hand_ikparentL']} />
        <primitive object={nodes['MCH-upper_arm_ik_targetparentL']} />
        <primitive object={nodes['MCH-hand_ikparentR']} />
        <primitive object={nodes['MCH-upper_arm_ik_targetparentR']} />
        <primitive object={nodes['MCH-foot_ikparentL']} />
        <primitive object={nodes['MCH-thigh_ik_targetparentL']} />
        <primitive object={nodes['MCH-foot_ikparentR']} />
        <primitive object={nodes['MCH-thigh_ik_targetparentR']} />
      </group>
      <mesh castShadow receiveShadow geometry={nodes.room.geometry} material={materials["Basic-L"]} />
    </group>
  )
}

useGLTF.preload('/models/portfolio.glb')
